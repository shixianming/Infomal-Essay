c语音基础知识
1.软件简介：visual studio 219
1）在工具栏的选项窗口option可以设置字体颜色和界面的背景。
2）创建新的项目选择控制台应用c++

2.基本知识
1）几个常用的符号：%d--格式占位符(整数类型)，在输出变量的时候使用
				 %f--格式占位符（浮点数类型），在输出变量的时候使用
				 %c--格式占位符（字符类型），在输出变量的时候使用
				 a.当使用char类型定义一个变量时，如果赋值用''号表示赋值的是一个
				 字符，那么输出时用%d会输出这个字符对应的ascll码值，用%c输出时
				 会输出''内的字符
				 b.当使用char类型定义一个变量时，如果赋值不用''号表示赋值的是一个
				 字面量，那么输出时用%d会输出字面量，用%c输出时会输出这个字面量
				 对应的ascll码值
				 %ld--格式占位符（long int），在输出变量的时候使用
				 %s--格式占位符（字符串类型），在输出变量的时候使用
				 注：通过不同的格式操作，可以得到不同的结果
				 n--格式换行符
				 \t--空格
				 定义常量的两种方式
				 a.用#defin去定义一个常量如--#define N 10
				 b.用const去修饰一个变量如--const int a = 100
				 <stdio>--c语音标准输入输出头文件
2)常用的一些语法：输出--printf
					  %4d是printf的格式化参数，表示输出一个整型数值，输出宽度为4，且右对齐
					  %-4d这是printf的格式化参数，表示输出一个整型数值，输出宽度为4，且左对齐
				 输入--scanf，在使用输入语句时，会出现错误，因为缺少了某一段代码，这个时候需要复制
				 这段代码到头文件的上一行。_CRT_SECURE_NO_WARNINGS
				 同时使用输入语句时，输入变量的前面要加上&（取址符）。
			
3.数据类型
1）基本数据类型：整数类型--常用整数类型int
					  --短整数类型short
					  --长整数类型long
					  unsigned--无符号
			   浮点型--单精度float//保留位数时，在最后一位会随机赋值
					--双精度double//保留位数时，精度较高一般使用double
			   字符型--char(只能定义单个字符)
			   可以通过sizeof()查看数据类型所占字节数
2）构造数据类型：（复杂类型）

3）指针类型：

4）空类型：void

4.运算符
1）算数运算符：+ - * / %
2）关系运算符：> < >= <= != ==(结果为true-1 false-0)
3）逻辑运算符：&& ||！（短路运算--如果第一个表达式，就能决定整个表达式的值
              第二个表达式就被短路了）
4）赋值运算符：= += -= *= /=（从右向左开始赋值，赋值运算的运算级别最低）
5）单目运算符：++ --(分为前++先自增后运算，后++先运算后自增)
注：强制类型转换优先级大于赋值运算符

4.条件控制语句
1）if if_else if_else if

5.常用的循环
1）for for循环的语句为for（从哪开始;到哪结束;如何变化）
2）while while循环的语句为while（true）
   do_while 与 while的区别 do_while不管判断条件，会先执行一遍语句
						   while先判断，再执行语句
注：a.break 退出当前循环
	b.continue 跳过本次条件，进行下一次循环

6.数组
1）一维数组:数组的声明--申请连续的空间，存储数据（数据类型+数组名+[]）
			 a.当数组的数据类型确定以后，该空间的数据就必须和该类型匹配，不可更改
			 b.数组元素要和数据类型保持一致
			 c.数组名要见名知意并且避免和c语音关键字重名，数组名的地址是数组首元素的地址
			 d.[]数组长度必须是常量或者常量表达式
			数组的引用--通过下标找到对应的数据,数组是一片连续的存储单元
			   元素与元素之间的距离与数据类型有关
2)二维数组：数组的声明--数据类型+数组名+[常量表达式1][常量表达式2]
		   数组的结构--物理结构按照行储存，储存顺序（行*列）
					  内存结构按照地址进行排布
		   数组的赋值--动态赋值
					--静态赋值
注：二维数组的行可不填，根据列数补行数。不完全赋值时自动补零。不要将初始化表为null。
当给定列数时，每一行的元素个数都是固定的，不给赋值时自动补零。如arr[][4]，没一行都是四个元素
3）字符数组：数组的声明--数据类型+数组名+[常量表达式]			
注：字符数组名也是地址，不能直接将字符串赋值给字符数组名，字符串数组有\0,所以在计算长度时要注意
用""修饰的是字符串，用''修饰的是字符

7.函数
1）组成--函数的返回值类型：分为有返回值和无返回值类型（void）
	  --函数名：a.但是要见名知意
			   b.并且避免和c语音关键词重名
			   c.驼峰命名法				
	  --函数参数：分为有参和无参
	  --函数体：实现该功能执行的代码语句
	  --函数返回值：和函数类型有关
2）作用--实现一个功能
3）调用--通过函数名进行调用
4）嵌套--注意函数的执行顺序
5）递归--需要注意三个点：a.明确递归的终止条件
（Basis05）			   b.给出递归终止时的处理办法
					   c.提取重复的逻辑，缩小问题规模
					   d.避免堆栈溢出，控制递归次数
递归笔记：在使用递归时首先需要找到每次递归的规律，然后找出结束条件,当递归结束条件定义为最小值的时候那么递归变化应该用递减
当递归结束条件定义为最大值的时候那么递归变化应该递增。定义为最小值时，递归是递去时计算，定义为最大值时，递归是归来时计算。
注：函数尽可能单一，只考虑怎么写这个函数，不考虑怎么去使用当函数写在主函数的后面时需要在
	主函数的前面进行函数声明。
	全局变量在函数前书写，和主函数生命周期一致。
	局部变量在函数内书写，和函数的声明周期一致。
+:常用的函数--rand（）随机数生成器
		   --printf（）输出函数
		   --scanf（）输入函数，可以输入多个字符串，但是不包含空格，遇到空格或者回车结束
		   --scanf_s（）输入函数，不会越界
		   scanf函数缺失代码段：#define _CRT_SECURE_NO_WARNINGS
		   --gets_s（）获取字符串专用函数，不会因为字符串之间的空格而结束，其结束条件时回车键
		   gets_S只能输入一个字符串
		   并且使用完这个函数以后，会自动清零，不会对下一次获取控制台输入造成影响
		   --strln（）查看字符串的长度 
		   gets_s与strln需要的头文件：string.h
		   --puts（）字符串输出函数
		   --strcpy（1，2）拷贝字符串的函数，字符串2拷贝到字符串1
		   --strcmp（1，2）比较字符串的函数，字符串1大于2返回正数，否则返回负数，相等为0
		   --strcat（1，2）字符串拼接函数，字符串2拼接到字符串1
		   --srand(time(NULL))初始化随机数，初始化以后再使用rand随机数就是随机的，不然直接使用rand系统给的随机数是固定的
		   随机数函数需要的头文件：time.h+stdlib.h
		   --sqrt（）开方函数
		   --pow（）平方函数
		   开方与平方函数需要的头文件：math.h
		   --sizeof（）查看字节函数
		   --malloc（）动态内存分配申请函数
		   --exit（0）直接退出函数
		   --free（）释放空间函数
		   需要导入头文件malloc.h，stdlib.h
		   --sort（）排序函数
		   需要导入头文件：algorithm

8.指针
1）定义变量的意义--a.建立符号表
			   --b.通过变量的数据类型，制定分配空间的大小
			   --c.解释空间的值
			   --d.确定变量的取值范围
			   --e.决定不同的操作（如浮点数类型不能取余）
2）指针变量的声明--如int *pa
			 	  int *代表了指针变量类型，其空间中存放的是int类型数据的地址
				  指针变量在内存中占4个字节
3）指针的引用--通过*+指针名可以导出存放在指针中的地址的变量的数据
（Basis07）	  通过地址找到该空间的数据，可以直接通过地址去更改变量的值
			  a.指针：内存中一块空间的地址数值，是一个常量
			  b.指针变量：内存总一块可以存放空间地址的变量，是一个变量
			  c.指针的自增和自减，表示偏移一个单位的长度
			  d.所有的指针都支持递增递减运算，但只有在数组中使用才是最有意义的
4）指针是什么--在任何程序数据载入内存以后，在内存中都有他们的地址，这就指针。
而为了保存一个数据在内存中的地址，我们就需要指针变量。总结（指针是程序数据在内存中的地址，而指针变量时用来保存这些地址的变量）
注：要保证等式左右两边的类型相匹配，注意区分带*（导出的是目标变量）和不带*（导出的是目标变量的地址）时指针名的意义
在使用指针时要注意目标变量的作用范围，编译器分配的空间地址是随机的，不要强制转换地址
*p--是一个变量的值，p--是地址
当我们交换两个指针变量的地址时，目标变量的值是不会改变的，我们只是改变了指针保存的地址，此时通过地址导出的值
发生了改变，但是目标变量的值不会交换。
当我们交换连个解引用的值时，这时候目标变量的值改变了，因为我们通过解引用直接改变了目标变量的值
这时候再通过地址导出导出目标变量时，值是交换的。
坏指针：指针变量的值是NULL，或者未知的地址值，或者是当前应用程序不可访问的地址值，这样的指针就是坏指针，不能对他们进行解引用操作
否则程序会出现错误，导致程序意外终止。任何一个指针变量在做解引用操作前，都必须保证它的指向是有效的，可用的内存块，否则就会出错。
坏指针时造成c语言bug的最频繁的原因之一。
5）数组的指针变量--可以像数组的指针一样参与数组运算
			   --数组作为函数参数传递的问题：通过函数确定一个以一个数组需要两个参数
			   --该数组首元素的地址
			   --该数组的长度
注：数组指针是数组首元素的地址，数组的指针是指向数组的指针
+:有些情况下，不需要使用取址符（&）取地址。比如--数组名的值就是这个数组第一个元素的地址
										   --函数名的值就是这个函数的地址
										   --字符串字面值常量作为右值时，就是这个字符串对应的字符数组的名称
										   也就是这个字符串在内存中的地址
6)二维数组的指针变量--首元素的地址不是数组名的地址
				  --数组名是首行的地址，那么一次解引用也就是*arr是首行的地址，也就是首行首元素的地址
		 		  --第二次解引用也就是**arr是首行首元素
				  --对二维数组来说，解引用就像一层一层的剥开它的外壳，最外面一层也就是整个数组
7)二维数组的行指针--行指针声明：数据类型（*行指针变量名）[每行列数] int（*parr）[j]
8）指针数组和数组指针--指针数组的声明：数据类型 *数组名[元素个数]				
（Basis08）		   --数组指针：int（*p）[3] （*p）[3]代表指向长度为3的数组

9）指针与字符--字符常量指针书写：const char* 字符指针变量名 = “字符常量”;const char* 字符指针变量名[]字符常量指针数组
（Basis09）	--或者定义一个字符数组，将数组名赋值给指针变量char name[] = {}; char* p = name;
		    --由于字符串是字符常量，需要用字符常量指针指向它
			--a.char* ch1 = "abcdefg";//左边是一个指针变量指向右边字符常量,4个字节
			--b.char ch2[10] = {'a','b','c'};//左边是字符数组，长度为10，3个字节。当用字符数组存储字符串时，单个输入需要手动添加'\0'
			--c.char ch3[10] = {"abcdefg"};//左边是字符数组，长度为10，8个字节
+:字符串的存储方式有--字符数组
				  --字符指针
注：字符串是常量的时候，比如将字符串赋值给一个字符指针变量时，此时因为定义了一个指针，并没有定义空间来存放这个字符串，所以编译器会将这个字符串
放到常量区，因此使用字符指针来存储字符串时需要加上const
10）指针函数--函数的返回值是指针
11）多级指针--注意指针的层数以及解引用时的层数

9.内存四区--堆区（动态内存分配）：a.malloc申请内存空间时用的函数，需要导入头文件<malloc.h>。比如int* p = （int*）malloc（a*sizeof（int））;
		  （Basis09）		   为了保证数据的通用性，注意等式两边的类型。在申请一片空间以后需要判断这片空间是否空，这里的判断不是为了判断空间
							   的大小而是为了判断空间是否分配成功，在等式的左边是一个局部变量存在于栈区而等式的右边存在于堆区，这里的判断还是
							   有必要的。malloc开辟的空间属于程序员自我管理的区域，申请的空间相对自由，若不及时释放，会造成堆栈空间溢出的现象
                               除非整个程序运行结束关闭退出。利用free（）函数进行空间释放
		 --栈区（局部变量）
		 --全局区（常量区--不可更改只能取代）:当指针变量指向全局区的数据时，系统会检测全局区中是否有相同的数据
		 当系统检测保存数据相同时，指针变量就会指向同一块全局区中的空间
		 --代码区

10.预处理宏
1）宏定义--单纯的替换，并没有对文本本身进行任何处理。#define 标识符 单词串，标识符尽量大小（为了和局部变量区分）
		--作用范围：在需要结束时重新#define 标识符
		--宏的嵌套：宏可以嵌套不能递归，宏可以重复定义。宏不可加分号（单纯的文本替换，需要替换的东西都要加上）				
		--宏表达式：宏定义表达式时注意运算顺序，该加括号的要加
2)函数宏--带参数的宏

11.结构体
1）结构体的声明--在主函数中进行声明或者在结构体大括号分号前进行声明，可以被声明为变量、指针、数组
2）结构体内存对齐--结构体变量在内存中所占字节大小与内部变量摆放有关，需要将类型相同的元素摆放在一起，保证空间的利用率
优先选择最大类型
3）结构体数组--结构体数组的声明与一般数组相同，大体上看结构体相当于一个类型，参考定义数组
4)结构体指针变量--参考二维数组的指针变量
5）（.）和（->）--（.）在所有运算符中优先级最高，其结合性是自左向右的，可以用"的"来表示它。用于结构体名访问成员它是一个二元操作符
				 在其操作符左边是结果为结构体的表达式，其操作符的右边是成员的名称
			   --（->）用于结构体指针访问成员。它是一个二元操作符在其操作符的左边是一个指向结构的指针，其操作符的右边是成员的名称
6）结构体总结--结构体名使用（.）运算符访问成员，结构体指针使用（->）运算符访问成员
			--在结构体中对于使用字符数组还是字符指针来储存字符串这个问题，尽量还是使用字符数组来储存字符串
+：因为使用字符指针存储字符串时，这时的字符串存储在编译器认为存储字符串常量的任何地方，这时的结构体中存放的只有一个地址而已，分配对应
类型的字节。此时结构体不为字符串分配任何存储空间，所以此时控制台输入字符串存在了一个危险。这时候scanf录入的字符串放到字符指针指向的内存
由于这是一个未初始化的变量，因此改地址是可以指向任意大小的。若是一定要使用字符指针去存储字符串常量，需要给定长度。因此我们最好还是使用
字符数组来存储字符串。
注：结构体是一种复合的数据类型。匿名结构体在一篇代码中只能使用一次，尽量不要使用。结构体中不能包含函数。除了相同类型的结构体互相整体赋值
以外，其他情况下不允许整体引用，只能对各个成员分别引用





11.数据结构和算法
1）什么是数据结构--它是一门研究非数值计算的程序设计问题中的操作对象，以及他们之间的关系和操作等相关问题。简单点来说就是程序设计=数据结构+算法
再简单点来说就是数据元素相互之间存在的一种或多种特定关系的集合
			   --具体指同一类数据元素中，各元素之间的相互关系，包括三个组成成分，数据的逻辑结构，数据的存储结构以及数据的运算结构
			   --传统上我们将数据结构分为逻辑结构和物理结构
			   a.逻辑结构：指数据对象中数据元素之间的相互关系
			   b.物理结构：指数据的逻辑结构在计算机中的存储形式
2）逻辑结构--a.线性结构：线性结构中数据元素之间是一对一的关系（Improve01--数组，Improve02--栈，Improve03--单链表，Improve4--链式栈，Improve05--双链表）
		    b.集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有其他的关系
			c.树形结构：树形结构中的数据元素之间存在一种一对多的层次关系（Improve06--树）
			d.图形结构：图形结构的数据元素是多对多的关系（网状结构）
注：bcd属于非线性结构
3）物理结构--a.顺序存储：是把数据元素存放在地址连续的存储单元里，其数据见的逻辑关系和物理关系是一致的（如数组）
		    b.链式存储：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的也可以是不连续的，此时其存储关系并不能反应其逻辑关系
			因此我们需要一个用一个指针存放数据元素的地址，这样通过地址就可以找到相关的数据元素的位置
注：顺序存储结构的空间大小固定，连续存储，按位置进行排序
	链式存储结构的空间大小固定，离散分布

4）算法--算法的五个特性
		a.输入：算法具有零个或多个输入
		b.输出：算法至少有一个或多个输出
		c.有穷性：算法在执行有限的步骤后，自动结束而不是无限循环，并且每一个步骤在可接受的时间内完成
		d.确定性：算法的每一个步骤都具有确定的含义，不会出现二义性。在一定的条件下只有一条执行路径，每一个步骤都应该被精确定义而无歧义
		e.可行性：算法的每一步都必须是可行的

typedef--自定义

